worker_processes  1;


events {
    worker_connections  1024;
}

http {
    default_type        application/octet-stream;
    sendfile            on;
    keepalive_timeout   65;

    # by setting lua code cache to 'off'  we don't 
    # need to reload nginx. The con for doing this is
    # that the module gets reloaded on every execution
    # which means that local variables from modules are
    # not preserved
    # (see more about the lua-nginx-module at 
    # https://github.com/openresty/lua-nginx-module)
    lua_code_cache      off;

    # sets the base path that nginx will search for the
    # lua files
    lua_package_path    '/etc/nginx/?.lua';

#    proxy_cache_path /tmp/mycache keys_zone=mycache:10m;

    server {
        listen          8888;
        server_name     localhost;

        location /bearer-to-basic {

          # sets a lua code to execute whenever a request
          # comes at this location and the rewrite phase 
          # of nginx is reached. Here we're just requiring
          # the module with name 'bearer-to-git-basic' 
          rewrite_by_lua_block {
            require("bearer-to-git-basic")()
          }

          proxy_pass http://localhost:80/auth-dump;
        }

        location /basic-to-bearer {

          # same as in the other 'rewrite_by_lua_block'
          # but this time using  'the basic-git-to-bearer'
          # module
          rewrite_by_lua_block {
            require("basic-git-to-bearer")()
          }

          proxy_pass http://localhost:80/auth-dump;
        }

        location /auth-dump {

          # Executes the 'auth-dump' module at the content
          # phase. This is when we have access to the body
          # of the request and all properties of it are already
          # set.
          content_by_lua_block {
            require("auth-dump")()
          }
        }

#	proxy_cache mycache;
 
#    	slice              1m;
#    	proxy_cache_key    $host$uri$is_args$args$slice_range;
#    	proxy_set_header   Range $slice_range;
    	proxy_http_version 1.1;
#    	proxy_cache_valid  200 206 1h;
 
    	location / {
            resolver 127.0.0.11 ipv6=off;
            rewrite_by_lua_block {
             	require("basic-git-to-bearer")()
            }
            proxy_pass http://$http_host$uri$is_args$args;
            proxy_intercept_errors on;
            error_page 302 303 = @handler;
#	    set $hash $host$uri$is_args$args$slice_range;
#            content_by_lua_block {
#               require("proxy-dump")()
#            }
    	}

	location @handler {
           set $saved_redirect_location '$upstream_http_location';
           proxy_pass $saved_redirect_location;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
